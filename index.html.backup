<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gearboxy - Earn Rewards on Your Idle Tokens</title>

    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        // Brand Colors
                        brand: {
                            pink: '#EA0890',
                            green: '#22C55E',
                        },
                        // Background Hierarchy
                        bg: {
                            primary: '#141414',
                            secondary: '#19191B',
                            tertiary: '#1E1E20',
                            elevated: '#252527',
                        },
                        // Text Hierarchy
                        txt: {
                            primary: '#FFFFFF',
                            secondary: '#A1A1AA',
                            tertiary: '#71717A',
                        },
                        // Borders
                        border: {
                            default: '#27272A',
                            light: '#3F3F46',
                        }
                    }
                }
            }
        }
    </script>

    <!-- React and ReactDOM -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>

    <!-- Babel Standalone -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

    <!-- Wagmi & RainbowKit -->
    <script src="https://cdn.jsdelivr.net/npm/viem@2.x/dist/viem.umd.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@wagmi/core@2.x/dist/wagmi-core.umd.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@wagmi/connectors@5.x/dist/wagmi-connectors.umd.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/@rainbow-me/rainbowkit@2.2.9/dist/index.css" />
    <script src="https://unpkg.com/@rainbow-me/rainbowkit@2.2.9/dist/index.umd.js"></script>

    <!-- API Client -->
    <script src="/api-client.js"></script>
    <script src="/web3-config.js"></script>

    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
                'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
                sans-serif;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { createContext, useContext, useMemo, useState } = React;
        const { StrictMode } = React;
        const { createRoot } = ReactDOM;

        /**
         * Gearbox Strategy Agent ‚Äî Full App Flow (Chat-first Fintech Dashboard)
         *
         * P0 UX Improvements Applied:
         * ‚úì Input field moved to top of ChatPanel
         * ‚úì Consolidated empty states with progressive disclosure
         * ‚úì Collapsible sidebar design
         * ‚úì Positions integrated into main flow
         * ‚úì Visual template cards with icons
         * ‚úì Enhanced status indicators with timestamps
         * ‚úì Prominent CTAs in empty states
         * ‚úì Stepped onboarding flow
         */

        /* ----------------------------
           Minimal UI primitives
           ----------------------------*/
        const Badge = ({ children, tone = "neutral" }) => {
          const toneMap = {
            neutral: "bg-gray-100 text-gray-800",
            success: "bg-green-100 text-green-800",
            warning: "bg-yellow-100 text-yellow-800",
            danger: "bg-red-100 text-red-800",
            accent: "bg-indigo-50 text-indigo-700",
          };
          return (
            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${toneMap[tone]}`}>
              {children}
            </span>
          );
        };

        const Field = ({ label, children }) => (
          <div className="flex flex-col gap-1">
            <div className="text-xs text-gray-500">{label}</div>
            <div className="text-sm text-gray-900">{children}</div>
          </div>
        );

        /* Smart Empty State - Progressive disclosure based on user journey */
        const OpportunityEmptyState = ({ hasMandate, isScanning, onCreateMandate }) => {
          if (!hasMandate) {
            return (
              <div className="flex flex-col items-center justify-center py-16 px-6 text-center">
                <div className="w-16 h-16 rounded-full bg-indigo-100 flex items-center justify-center mb-4">
                  <svg className="w-8 h-8 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                  </svg>
                </div>
                <h3 className="text-lg font-semibold text-gray-900 mb-2">Ready to Start Earning?</h3>
                <p className="text-sm text-gray-600 max-w-md mb-6">
                  Create your first mandate to start finding high-yield opportunities. Tell the agent what you want using the assistant on the left.
                </p>
                <button
                  onClick={onCreateMandate}
                  className="px-6 py-3 rounded-lg bg-indigo-600 text-white hover:bg-indigo-700 font-medium"
                >
                  Create Your First Mandate
                </button>
              </div>
            );
          }

          if (isScanning) {
            return (
              <div className="flex flex-col items-center justify-center py-16 px-6 text-center">
                <div className="w-16 h-16 rounded-full bg-indigo-100 flex items-center justify-center mb-4 animate-pulse">
                  <svg className="w-8 h-8 text-indigo-600 animate-spin" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                </div>
                <h3 className="text-lg font-semibold text-gray-900 mb-2">Scanning for Opportunities</h3>
                <p className="text-sm text-gray-600 max-w-md">
                  Analyzing 47+ strategies across Ethereum, Base, and Arbitrum... opportunities will appear here automatically.
                </p>
              </div>
            );
          }

          return null;
        };

        /* ----------------------------
           App context
           ----------------------------*/
        const AppContext = createContext(null);
        function useApp(){ return useContext(AppContext); }
        const uid = (p = "id") => `${p}_${Math.random().toString(36).slice(2,9)}`;

        /* ----------------------------
           Chat-first onboarding
           ----------------------------*/
        function ChatPanel(){
          const { createMandateFromIntent, templates, setProposals, walletAddress, connectWallet, isWalletConnecting, openProposal, approveProposal } = useApp();
          const [messages, setMessages] = useState([
            { id: uid('m'), from: 'agent', text: "Hi! I'm Gearboxy ü§ñ I help you earn rewards on tokens sitting idle in your wallet.", showWalletConnect: !walletAddress }
          ]);
          const [input, setInput] = useState('');
          const [isLoading, setIsLoading] = useState(false);
          const [apiClient] = useState(() => new window.GearboxAPIClient());
          const [availableStrategies, setAvailableStrategies] = useState([]);

          // Dynamic quick replies - show strategies if available, otherwise show default options
          const quickReplies = availableStrategies.length > 0 ? [
            ...availableStrategies.slice(0, 3).map(strategy => ({
              icon: "üíé",
              label: strategy.title.replace(/^(USDC|WETH|ETH)\s+/, ''), // Remove asset prefix
              description: `${strategy.projAPY}% APY`,
              isStrategy: true,
              strategy: strategy
            })),
            {
              icon: "‚öôÔ∏è",
              label: "Set Alert",
              description: "Notify me later",
              isAlert: true
            }
          ] : walletAddress ? [
            {
              icon: "üëõ",
              label: "My Wallet",
              description: "Analyze holdings",
              text: `Analyze my wallet ${walletAddress}`
            },
            {
              icon: "üí∞",
              label: "Stablecoins",
              description: "Earn with idle USDC/USDT",
              text: "Find me the best USDC farming opportunities with low risk"
            },
            {
              icon: "‚ö°",
              label: "Max Yields",
              description: "Leverage my ETH",
              text: "Show me high-yield ETH strategies with 3-5x leverage"
            }
          ] : [
            {
              icon: "üí∞",
              label: "Stablecoins",
              description: "Earn with idle USDC/USDT",
              text: "Find me the best USDC farming opportunities with low risk"
            },
            {
              icon: "‚ö°",
              label: "Max Yields",
              description: "Leverage my ETH",
              text: "Show me high-yield ETH strategies with 3-5x leverage"
            },
            {
              icon: "üõ°Ô∏è",
              label: "Low Risk",
              description: "Conservative approach",
              text: "What are the safest yield strategies right now?"
            }
          ];

          function pushMessage(from, text, extraData = {}){
            setMessages(m => [...m, { id: uid('m'), from, text, ...extraData }]);
          }

          // Auto-trigger wallet analysis after connection
          React.useEffect(() => {
            window.onWalletConnected = async (address) => {
              // Add "connected" confirmation message
              pushMessage('agent', `‚úÖ Wallet connected: ${address.slice(0,6)}...${address.slice(-4)}`);

              // Add "analyzing" message with loading state
              const analyzingId = uid('m');
              setMessages(m => [...m, { id: analyzingId, from: 'agent', text: 'üîç Analyzing your holdings...', isLoading: true }]);

              try {
                // Call AI to analyze wallet
                const response = await apiClient.sendMessage(`Analyze my wallet ${address}`);

                // Remove loading message
                setMessages(m => m.filter(msg => msg.id !== analyzingId));

                // Add analysis result
                pushMessage('agent', response.message);

                // Check if we have token data to auto-generate strategy
                if (response.message.toLowerCase().includes('gho') ||
                    response.message.toLowerCase().includes('susde') ||
                    response.message.toLowerCase().includes('eth')) {

                  // Auto-query first strategy after short delay
                  setTimeout(async () => {
                    // Smart token mapping: Map user tokens to Gearbox-compatible assets
                    let queryAsset = 'USDC'; // Default
                    let assetForMandate = 'USDC';
                    let maxPosition = 100;

                    if (response.message.toLowerCase().includes('gho') || response.message.toLowerCase().includes('susde')) {
                      // GHO and sUSDe are stablecoins ‚Üí query USDC strategies
                      queryAsset = 'USDC';
                      assetForMandate = 'USDC';
                      maxPosition = 100; // User has ~$100 in stablecoins
                    } else if (response.message.toLowerCase().includes('eth')) {
                      // ETH ‚Üí query WETH strategies
                      queryAsset = 'WETH';
                      assetForMandate = 'WETH';
                      maxPosition = 80; // User has ~$80 in ETH
                    }

                    console.log('üîç Querying for:', queryAsset);
                    const strategyResponse = await apiClient.sendMessage(`Find me ${queryAsset} farming opportunities`);
                    console.log('üì• Strategy response:', strategyResponse);
                    pushMessage('agent', strategyResponse.message);

                    // If strategies were returned, show them as quick reply buttons
                    if (strategyResponse.strategies && strategyResponse.strategies.length > 0) {
                      console.log('üìä Received strategies from API:', strategyResponse.strategies);
                      setAvailableStrategies(strategyResponse.strategies);
                      setProposals(strategyResponse.strategies); // Keep for now

                      // Auto-create mandate in background (don't show it)
                      createMandateFromIntent({
                        asset: assetForMandate,
                        minAPY: 5,
                        maxLeverage: 10,
                        risk: 'Medium',
                        maxPosition: maxPosition
                      });
                    }
                  }, 1500);
                }
              } catch (error) {
                setMessages(m => m.filter(msg => msg.id !== analyzingId));
                pushMessage('agent', `Sorry, I encountered an error analyzing your wallet: ${error.message}`);
              }
            };

            return () => {
              window.onWalletConnected = null;
            };
          }, [apiClient, createMandateFromIntent]);

          async function handleSend(text){
            if(!text || isLoading) return;
            pushMessage('user', text);
            setInput('');
            setIsLoading(true);

            // Show typing indicator
            const thinkingId = uid('m');
            setMessages(m => [...m, { id: thinkingId, from: 'agent', text: 'ü§î Analyzing...' }]);

            try {
              // Call real AI agent
              const response = await apiClient.sendMessage(text);

              // Remove thinking message
              setMessages(m => m.filter(msg => msg.id !== thinkingId));

              // Add AI response
              pushMessage('agent', response.message);

              // Check if response suggests creating a mandate (simple heuristic)
              if (response.message.toLowerCase().includes('strategy') ||
                  response.message.toLowerCase().includes('opportunity')) {
                // Trigger strategy generation after a brief delay
                setTimeout(() => {
                  // Parse asset from the original message
                  let asset = 'USDC';
                  if (text.toLowerCase().includes('eth')) asset = 'WETH';
                  else if (text.toLowerCase().includes('wsteth')) asset = 'wstETH';
                  else if (text.toLowerCase().includes('btc')) asset = 'WBTC';

                  createMandateFromIntent({ asset, minAPY: 5, maxLeverage: 3, risk: 'Medium', maxPosition: 10000 });
                }, 1000);
              }
            } catch (error) {
              console.error('Chat error:', error);
              setMessages(m => m.filter(msg => msg.id !== thinkingId));
              pushMessage('agent', `Sorry, I encountered an error: ${error.message}. Please try again.`);
            } finally {
              setIsLoading(false);
            }
          }

          return (
            <div className="rounded-2xl bg-bg-secondary border border-border-default p-6 shadow-lg h-full flex flex-col min-h-[600px]">

              {/* Messages area - Takes up most space */}
              <div className="flex-1 overflow-auto space-y-4 pr-2">
                {messages.map(m => (
                  <div key={m.id}>
                    <div className={`max-w-[90%] ${m.from==='agent' ? 'bg-bg-tertiary self-start rounded-xl p-4 text-txt-primary' : 'bg-brand-pink text-white self-end rounded-xl p-4 ml-auto'}`}>
                      <div className="text-base leading-relaxed flex items-center gap-2">
                        {m.text}
                        {m.isLoading && (
                          <div className="flex gap-1">
                            <div className="w-2 h-2 bg-indigo-600 rounded-full animate-bounce" style={{animationDelay: '0ms'}}></div>
                            <div className="w-2 h-2 bg-indigo-600 rounded-full animate-bounce" style={{animationDelay: '150ms'}}></div>
                            <div className="w-2 h-2 bg-indigo-600 rounded-full animate-bounce" style={{animationDelay: '300ms'}}></div>
                          </div>
                        )}
                      </div>
                    </div>
                    {m.showWalletConnect && !walletAddress && (
                      <div className="mt-4 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-2xl p-6 text-white max-w-xl shadow-xl">
                        <h3 className="text-xl font-bold mb-2">Connect Your Wallet</h3>
                        <p className="text-base mb-4 opacity-90">
                          Connect to analyze your holdings and find personalized yield opportunities
                        </p>
                        <button
                          onClick={connectWallet}
                          disabled={isWalletConnecting}
                          className="bg-white text-indigo-600 px-8 py-3.5 rounded-xl font-bold hover:bg-gray-100 transition-all disabled:bg-gray-300 disabled:cursor-not-allowed flex items-center gap-2 text-base shadow-lg hover:shadow-xl"
                        >
                          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z" />
                          </svg>
                          {isWalletConnecting ? 'Connecting...' : 'Connect Wallet'}
                        </button>
                      </div>
                    )}
                    {m.strategyDetails && (
                      <div className="mt-4 bg-white border border-gray-200 rounded-2xl p-6 max-w-xl shadow-lg">
                        <div className="flex items-start justify-between mb-4">
                          <div>
                            <h3 className="text-xl font-bold text-gray-900">{m.strategyDetails.title}</h3>
                            <p className="text-sm text-gray-500 mt-1">{m.strategyDetails.chain} ‚Äî {m.strategyDetails.strategy}</p>
                          </div>
                          <div className={`px-3 py-1 rounded-full text-xs font-semibold ${
                            m.strategyDetails.risk === 'low' ? 'bg-green-100 text-green-700' :
                            m.strategyDetails.risk === 'medium' ? 'bg-yellow-100 text-yellow-700' :
                            'bg-red-100 text-red-700'
                          }`}>
                            {m.strategyDetails.risk.toUpperCase()}
                          </div>
                        </div>

                        <div className="grid grid-cols-2 gap-4 mb-6">
                          <div className="bg-gradient-to-br from-indigo-50 to-purple-50 p-4 rounded-xl">
                            <div className="text-xs text-gray-600 mb-1">Projected APY</div>
                            <div className="text-2xl font-bold text-indigo-600">{m.strategyDetails.projAPY}%</div>
                          </div>
                          <div className="bg-slate-50 p-4 rounded-xl">
                            <div className="text-xs text-gray-600 mb-1">TVL</div>
                            <div className="text-xl font-semibold text-gray-900">${(m.strategyDetails.tvl / 1000000).toFixed(1)}M</div>
                          </div>
                        </div>

                        <div className="space-y-3 mb-6">
                          <div className="space-y-2">
                            <div className="flex justify-between text-sm">
                              <span className="text-gray-600">Leverage</span>
                              <span className="font-semibold text-indigo-600">{m.strategyDetails.currentLeverage || m.strategyDetails.leverage}x</span>
                            </div>
                            <input
                              type="range"
                              min={m.strategyDetails.minLeverage || 1}
                              max={m.strategyDetails.maxLeverage || 10}
                              step="0.1"
                              value={m.strategyDetails.currentLeverage || m.strategyDetails.leverage}
                              onChange={(e) => {
                                const newLeverage = parseFloat(e.target.value);
                                // Recalculate APY: (collateralAPY * leverage) - (borrowAPY * (leverage - 1))
                                const newAPY = (m.strategyDetails.collateralAPY * newLeverage) - (m.strategyDetails.borrowAPY * (newLeverage - 1));

                                // Update the message with new leverage and APY
                                setMessages(msgs => msgs.map(msg => {
                                  if (msg.id === m.id && msg.strategyDetails) {
                                    return {
                                      ...msg,
                                      strategyDetails: {
                                        ...msg.strategyDetails,
                                        currentLeverage: newLeverage,
                                        projAPY: parseFloat(newAPY.toFixed(2))
                                      }
                                    };
                                  }
                                  return msg;
                                }));
                              }}
                              className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-indigo-600"
                            />
                            <div className="flex justify-between text-xs text-gray-500">
                              <span>{m.strategyDetails.minLeverage || 1}x</span>
                              <span>{m.strategyDetails.maxLeverage || 10}x</span>
                            </div>
                          </div>
                          <div className="flex justify-between text-sm">
                            <span className="text-gray-600">Est. Gas</span>
                            <span className="font-semibold text-gray-900">${m.strategyDetails.estimatedGas}</span>
                          </div>
                          <div className="flex justify-between text-sm">
                            <span className="text-gray-600">Collateral APY</span>
                            <span className="font-semibold text-gray-900">{m.strategyDetails.collateralAPY}%</span>
                          </div>
                        </div>

                        <button
                          onClick={() => {
                            // Clear strategy buttons
                            setAvailableStrategies([]);
                            // Add approval form inline
                            pushMessage('agent', '‚úÖ Great choice! Review the details and approve when ready.', {
                              proposalApproval: {
                                ...m.strategyDetails,
                                deposit: 1000,
                                borrow: 500,
                                borrowRate: 5.5,
                                healthFactor: 1.8,
                                net30d: 45
                              }
                            });
                          }}
                          className="w-full bg-gradient-to-r from-indigo-600 to-purple-600 text-white font-bold py-3 rounded-xl hover:from-indigo-700 hover:to-purple-700 transition-all shadow-lg hover:shadow-xl"
                        >
                          Open Position
                        </button>
                      </div>
                    )}
                    {m.proposalApproval && (
                      <div className="mt-4 bg-white border-2 border-indigo-200 rounded-2xl p-6 max-w-xl shadow-xl">
                        <div className="flex items-center justify-between mb-4">
                          <div>
                            <h3 className="text-xl font-bold text-gray-900">{m.proposalApproval.title}</h3>
                            <div className="text-sm text-gray-500 mt-1">{m.proposalApproval.chain} ‚Äî {m.proposalApproval.strategy}</div>
                          </div>
                          <div className="text-right">
                            <div className="text-xs text-gray-500">Projected APY</div>
                            <div className="text-2xl font-bold text-indigo-600">{m.proposalApproval.projAPY}%</div>
                          </div>
                        </div>

                        <div className="bg-slate-50 rounded-xl p-4 mb-4">
                          <div className="grid grid-cols-2 gap-4">
                            <div>
                              <div className="text-xs text-gray-600 mb-1">Investment</div>
                              <div className="text-lg font-semibold text-gray-900">${m.proposalApproval.deposit}</div>
                            </div>
                            <div>
                              <div className="text-xs text-gray-600 mb-1">Borrow</div>
                              <div className="text-lg font-semibold text-gray-900">${m.proposalApproval.borrow} <span className="text-sm text-gray-500">at {m.proposalApproval.borrowRate}%</span></div>
                            </div>
                          </div>
                        </div>

                        <div className="space-y-3 mb-6">
                          <div className="flex justify-between items-center">
                            <span className="text-sm text-gray-600">Health Factor</span>
                            <span className={`text-lg font-bold ${m.proposalApproval.healthFactor >= 1.5 ? 'text-green-600' : 'text-yellow-600'}`}>
                              {m.proposalApproval.healthFactor}x
                            </span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span className="text-sm text-gray-600">Projected net (30d)</span>
                            <span className="text-lg font-bold text-gray-900">${m.proposalApproval.net30d}</span>
                          </div>
                        </div>

                        <button
                          onClick={() => {
                            approveProposal(m.proposalApproval.id);
                            pushMessage('agent', 'üéâ Position approved! Head back to the main Gearbox app to view your credit account and manage your position.');
                          }}
                          className="w-full bg-gradient-to-r from-green-600 to-emerald-600 text-white font-bold py-3 rounded-xl hover:from-green-700 hover:to-emerald-700 transition-all shadow-lg hover:shadow-xl"
                        >
                          Approve & Sign
                        </button>
                      </div>
                    )}
                  </div>
                ))}
              </div>

              {/* Quick reply cards - Above input */}
              {quickReplies.length > 0 && (
                <div className="grid grid-cols-4 gap-2 mb-3 mt-3">
                  {quickReplies.map(q => (
                    <button
                      key={q.label}
                      onClick={() => {
                        if (q.isStrategy) {
                          // Show strategy details inline in chat
                          pushMessage('agent', `Here are the details for ${q.strategy.title}:`, { strategyDetails: q.strategy });
                        } else if (q.isAlert) {
                          // Handle alert/mandate setup
                          pushMessage('agent', 'üîî Alert feature coming soon! You\'ll be notified when new opportunities match your criteria.');
                        } else {
                          // Regular text-based quick reply
                          setInput(q.text);
                          handleSend(q.text);
                        }
                      }}
                      className="flex flex-col items-center justify-center p-3 rounded-lg bg-gradient-to-br from-slate-50 to-white hover:from-indigo-50 hover:to-white border border-gray-200 hover:border-indigo-300 transition-all group"
                    >
                      <div className="text-2xl mb-1">{q.icon}</div>
                      <div className="text-xs font-semibold text-gray-900 mb-0.5">{q.label}</div>
                      <div className="text-[10px] text-gray-500 text-center leading-tight">{q.description}</div>
                    </button>
                  ))}
                </div>
              )}

              {/* Input field at BOTTOM like normal chat */}
              <div className="border-t pt-4 mt-auto">
                <div className="flex gap-3">
                  <input
                    value={input}
                    onChange={(e)=>setInput(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && !isLoading && handleSend(input)}
                    placeholder="Type your investment goal or question..."
                    disabled={isLoading}
                    className="flex-1 p-4 rounded-xl border-2 border-gray-200 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 text-base disabled:bg-gray-100 disabled:cursor-not-allowed transition-all"
                  />
                  <button
                    onClick={()=>handleSend(input)}
                    disabled={isLoading}
                    className="px-6 py-4 rounded-xl bg-indigo-600 text-white hover:bg-indigo-700 text-base font-semibold disabled:bg-indigo-300 disabled:cursor-not-allowed transition-all shadow-md hover:shadow-lg"
                  >
                    {isLoading ? 'Sending...' : 'Send'}
                  </button>
                </div>
              </div>
            </div>
          );
        }

        /* ----------------------------
           SignMandate (inline preview + modal)
           ----------------------------*/
        function SignMandatePanel({mandate}){
          const { signMandateWithWallet } = useApp();
          const [open,setOpen] = useState(false);
          const [loading,setLoading] = useState(false);

          if(!mandate) return null;

          const handleSign = async ()=>{
            setLoading(true);
            await signMandateWithWallet(mandate.id);
            setLoading(false);
            setOpen(false);
          }

          return (
            <div className="rounded-2xl bg-white p-4 shadow-sm">
              <div className="flex items-start justify-between">
                <div>
                  <div className="text-sm font-semibold">Mandate preview</div>
                  <div className="text-xs text-gray-500">Drafted from your conversation ‚Äî edit or sign.</div>
                </div>
                <div className="flex gap-2">
                  <button onClick={()=>setOpen(true)} className="px-3 py-1 rounded bg-indigo-600 text-white text-sm">Sign</button>
                </div>
              </div>

              <div className="mt-3 grid grid-cols-2 gap-2">
                <div className="text-xs text-gray-500">Asset</div><div className="font-medium">{mandate.asset}</div>
                <div className="text-xs text-gray-500">Min APY</div><div className="font-medium">{mandate.minAPY}%</div>
                <div className="text-xs text-gray-500">Max Leverage</div><div className="font-medium">{mandate.maxLeverage}x</div>
                <div className="text-xs text-gray-500">Risk</div><div className="font-medium">{mandate.risk}</div>
                <div className="text-xs text-gray-500">Max Position</div><div className="font-medium">${mandate.maxPosition}</div>
              </div>

              {/* modal simplified */}
              {open && (
                <div className="fixed inset-0 z-40 flex items-center justify-center bg-black/40">
                  <div className="w-full max-w-lg bg-white rounded-2xl p-6">
                    <h3 className="text-lg font-semibold">Sign Mandate</h3>
                    <p className="text-sm text-gray-600 mt-2">This signs an intent message ‚Äî nothing will move without your approval.</p>

                    <div className="mt-4 flex gap-2 justify-end">
                      <button onClick={()=>setOpen(false)} className="px-3 py-2 rounded border">Cancel</button>
                      <button onClick={handleSign} disabled={loading} className={`px-3 py-2 rounded ${loading ? 'bg-indigo-300' : 'bg-indigo-600 text-white'}`}>{loading ? 'Signing...' : 'Sign & Activate'}</button>
                    </div>
                  </div>
                </div>
              )}
            </div>
          );
        }

        /* ----------------------------
           Proposal / Tx components (lightweight)
           ----------------------------*/
        function ProposalCard({p, onView}){
          return (
            <div className="rounded-lg border p-3 bg-white">
              <div className="flex items-start justify-between">
                <div>
                  <div className="text-sm font-semibold">{p.title}</div>
                  <div className="text-xs text-gray-500">{p.strategy} ‚Ä¢ {p.chain}</div>
                </div>
                <div className="text-right">
                  <div className="font-semibold">{p.projAPY}%</div>
                  <div className="text-xs text-gray-500">{p.leverage}x</div>
                </div>
              </div>

              <div className="mt-3 flex items-center justify-between">
                <div className="text-xs text-gray-500">Est. gas: ${p.estimatedGas}</div>
                <button onClick={()=>onView(p)} className="px-3 py-1 rounded bg-indigo-600 text-white text-sm">View</button>
              </div>
            </div>
          );
        }

        function ProposalDetailPanel({proposal}){
          const { approveProposal } = useApp();
          if(!proposal) return null;
          return (
            <div className="rounded-2xl bg-white p-6 shadow-sm">
              <div className="flex items-center justify-between">
                <div>
                  <h3 className="text-lg font-semibold">{proposal.title}</h3>
                  <div className="text-xs text-gray-500">{proposal.chain} ‚Äî {proposal.strategy}</div>
                </div>
                <div className="text-right">
                  <div className="text-sm text-gray-500">Projected APY</div>
                  <div className="text-2xl font-semibold">{proposal.projAPY}%</div>
                </div>
              </div>

              <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Field label="Investment">${proposal.deposit}</Field>
                  <Field label="Borrow">${proposal.borrow} at {proposal.borrowRate}%</Field>
                  <Field label="Health Factor">{proposal.healthFactor}x</Field>
                </div>
                <div>
                  <div className="text-sm text-gray-500">Projected net (30d)</div>
                  <div className="text-2xl font-semibold">${proposal.net30d}</div>

                  <div className="mt-4 flex gap-2 justify-end">
                    <button onClick={()=>approveProposal(proposal.id)} className="px-4 py-2 rounded bg-indigo-600 text-white">Approve & Sign</button>
                  </div>
                </div>
              </div>
            </div>
          );
        }

        function TxProgressPanel({txId}){
          // Only show when transaction is active - no empty state needed
          if(!txId) return null;
          return (
            <div className="rounded-2xl bg-white p-4 shadow-sm">
              <div className="text-sm font-semibold">Transaction Progress</div>
              <div className="mt-2 text-xs text-gray-500">Tx: <span className="font-mono">{txId}</span></div>
              <div className="mt-3 space-y-2">
                <div className="flex items-center justify-between"><div>Open credit account</div><div className="text-xs text-green-600">‚úì</div></div>
                <div className="flex items-center justify-between"><div>Deposit collateral</div><div className="text-xs text-green-600">‚úì</div></div>
                <div className="flex items-center justify-between"><div>Swap & Stake</div><div className="text-xs text-yellow-600">Pending</div></div>
              </div>
            </div>
          );
        }

        /* ----------------------------
           App logic (limited opportunities, chat-driven mandates)
           ----------------------------*/
        function FullFlowApp(){
          const templates = [
            { id: 'tmpl_stable', name: 'Stablecoin Yield (Conservative)', intentKeyword: 'stablecoins', asset: 'USDC', minAPY: 4.5, maxLeverage: 1.5, risk: 'Low', maxPosition: 5000 },
            { id: 'tmpl_eth_max', name: 'ETH Max Yield (Aggressive)', intentKeyword: 'eth', asset: 'wstETH', minAPY: 9, maxLeverage: 3, risk: 'High', maxPosition: 20000 },
            { id: 'tmpl_balanced', name: 'Balanced (Auto)', intentKeyword: 'balanced', asset: 'USDC', minAPY: 6.5, maxLeverage: 2, risk: 'Medium', maxPosition: 10000 },
          ];

          const [mandates, setMandates] = useState([]);
          const [activeMandate, setActiveMandate] = useState(null);
          const [proposals, setProposals] = useState([]); // limited to 3
          const [activeProposal, setActiveProposal] = useState(null);
          const [positions, setPositions] = useState([]);
          const [notifications, setNotifications] = useState([]);
          const [activeTx, setActiveTx] = useState(null);
          const [isScanning, setIsScanning] = useState(false);
          const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);
          const [walletAddress, setWalletAddress] = useState(null);
          const [isWalletConnecting, setIsWalletConnecting] = useState(false);

          function pushNotification(n){ const note = { id: uid('n'), ...n }; setNotifications(s=>[note,...s]); setTimeout(()=>setNotifications(s=>s.filter(x=>x.id!==note.id)),7000); }

          // Wallet connection using window.ethereum (MetaMask)
          async function connectWallet() {
            if (!window.ethereum) {
              pushNotification({ title: 'Wallet not found', body: 'Please install MetaMask to connect your wallet.' });
              return;
            }

            setIsWalletConnecting(true);
            try {
              const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
              const address = accounts[0];
              setWalletAddress(address);

              pushNotification({
                title: 'Wallet connected',
                body: `Connected: ${address.slice(0, 6)}...${address.slice(-4)}`
              });

              // Trigger auto-analysis after successful connection
              if (window.onWalletConnected) {
                setTimeout(() => window.onWalletConnected(address), 500);
              }
            } catch (error) {
              console.error('Wallet connection error:', error);
              pushNotification({ title: 'Connection failed', body: 'Could not connect to wallet.' });
            } finally {
              setIsWalletConnecting(false);
            }
          }

          function disconnectWallet() {
            setWalletAddress(null);
            pushNotification({ title: 'Wallet disconnected', body: 'Your wallet has been disconnected.' });
          }

          // Auto-connect if already authorized
          React.useEffect(() => {
            if (window.ethereum) {
              window.ethereum.request({ method: 'eth_accounts' })
                .then(accounts => {
                  if (accounts.length > 0) {
                    setWalletAddress(accounts[0]);
                  }
                })
                .catch(console.error);

              // Listen for account changes
              window.ethereum.on('accountsChanged', (accounts) => {
                if (accounts.length > 0) {
                  setWalletAddress(accounts[0]);
                  pushNotification({ title: 'Account changed', body: 'Wallet account updated.' });
                } else {
                  setWalletAddress(null);
                }
              });
            }
          }, []);

          function createMandateFromIntent(template=null, opts={}){
            const base = template ? template : { asset: 'USDC', minAPY:6.5, maxLeverage:2, risk:'Medium', maxPosition:10000 };
            const m = {
              id: uid('mandate'),
              ...base,
              ...opts.freeText && { note: opts.freeText },
              signed: false,
              createdAt: Date.now(),
              expiresAt: Date.now()+1000*60*60*24*30,
            };
            setMandates(s=>[m,...s]);
            setActiveMandate(m);
            pushNotification({ title: 'Mandate drafted', body: `${m.asset} ‚Äî ${m.risk}` });

            // NOTE: Proposals now come from real Gearbox SDK via API
            // generateMockProposals(m) is no longer needed
          }

          async function signMandateWithWallet(id){
            await new Promise(r=>setTimeout(r,700));
            setMandates(s=>s.map(m=> m.id===id? {...m, signed:true, signedAt:Date.now() }: m));
            pushNotification({ title: 'Mandate signed', body: 'Agent will monitor and propose.' });
          }

          function generateMockProposals(mandate){
            // Show scanning state first
            setIsScanning(true);

            // produce up to 3 curated proposals tailored to the mandate (deterministic-ish)
            setTimeout(() => {
              const pool = [];
              if(mandate.asset.toLowerCase().includes('usdc')){
                pool.push({ id: uid('p'), title: 'USDC Yield Curve Pool', chain: 'Ethereum', strategy: 'Curve + Gearbox', projAPY: 6.8, collateralAPY: 2.5, deposit: Math.min(10000, mandate.maxPosition), borrow: 8000, leverage: 1.8, maxLeverage: mandate.maxLeverage, healthFactor:2.3, estimatedGas: 12, net30d: 42, borrowRate: 4.2 });
                pool.push({ id: uid('p'), title: 'Stable AAA Lending', chain: 'Base', strategy: 'Lending + leverage', projAPY: 7.1, collateralAPY: 2.1, deposit: Math.min(8000, mandate.maxPosition), borrow: 6000, leverage: 1.75, maxLeverage: mandate.maxLeverage, healthFactor:2.0, estimatedGas: 8, net30d: 38, borrowRate: 3.9 });
              }
              if(mandate.asset.toLowerCase().includes('wst') || mandate.asset.toLowerCase().includes('eth')){
                pool.push({ id: uid('p'), title: 'wstETH Lido Boost', chain: 'Ethereum', strategy: 'Lido + Curve', projAPY: 8.9, collateralAPY: 3.3, deposit: Math.min(10000, mandate.maxPosition), borrow: 15000, leverage: Math.min(2.8, mandate.maxLeverage), maxLeverage: mandate.maxLeverage, healthFactor:1.95, estimatedGas: 22, net30d: 65, borrowRate: 5.1 });
              }

              // ensure max 3 proposals and short-circuit duplicates
              const curated = pool.slice(0,3);
              setProposals(curated);
              setIsScanning(false);
              pushNotification({ title: 'Opportunities ready', body: `Found ${curated.length} matches for your mandate.` });
            }, 2000); // Simulate scanning delay
          }

          function openProposal(p){ setActiveProposal(p); }

          function approveProposal(id){
            const p = proposals.find(x=>x.id===id);
            if(!p) return;
            // simulate tx lifecycle
            const tx = uid('0xtx');
            setActiveTx(tx);
            setProposals([]); // clear feed after user commits (clean UX)
            pushNotification({ title: 'Proposal approved', body: `Tx ${tx} submitted` });

            setTimeout(()=>{
              const pos = { id: uid('pos'), title: p.title, value: p.deposit + p.net30d, healthFactor: p.healthFactor, txId: tx };
              setPositions(s=>[pos,...s]);
              pushNotification({ title: 'Position opened', body: `${p.title} is now active.` });
            }, 1400);

            setTimeout(()=> setActiveTx(null), 5000);
          }

          function closePosition(id){ setPositions(s=>s.filter(p=>p.id!==id)); pushNotification({ title: 'Position closed', body: 'Closed successfully.' }); }

          const value = useMemo(()=>({
            templates,
            createMandateFromIntent,
            mandates,
            signMandateWithWallet,
            proposals,
            openProposal,
            approveProposal,
            positions,
            closePosition,
            notifications,
            pushNotification,
            isScanning,
            activeMandate,
            walletAddress,
            connectWallet,
            disconnectWallet,
            isWalletConnecting,
            setProposals
          }), [templates, mandates, proposals, positions, notifications, isScanning, activeMandate, walletAddress, isWalletConnecting]);

          return (
            <AppContext.Provider value={value}>
              <div className="min-h-screen bg-bg-primary py-10">
                <div className="max-w-7xl mx-auto px-4">
                  {/* Header with Wallet Connection */}
                  <div className="mb-6 flex items-center justify-between max-w-5xl mx-auto">
                    <div className="flex items-center gap-3">
                      <div className="text-2xl font-bold text-brand-pink">
                        Gearboxy ü§ñ
                      </div>
                    </div>

                    {/* Wallet Status Display (connected only) */}
                    {walletAddress && (
                      <div className="flex items-center gap-3">
                        <div className="px-4 py-2 rounded-lg bg-bg-elevated border border-border-default text-sm font-medium text-brand-green flex items-center gap-2">
                          <div className="w-2 h-2 rounded-full bg-brand-green"></div>
                          {walletAddress.slice(0, 6)}...{walletAddress.slice(-4)}
                        </div>
                        <button
                          onClick={disconnectWallet}
                          className="px-3 py-2 rounded-lg bg-bg-secondary border border-border-default hover:bg-bg-tertiary text-sm font-medium text-txt-primary"
                        >
                          Disconnect
                        </button>
                      </div>
                    )}
                  </div>

                  {/* FULL-WIDTH CHAT-FIRST LAYOUT */}
                  <div className="max-w-5xl mx-auto space-y-6">
                    {/* Chat Interface - Primary, Full Width */}
                    <div className="min-h-[600px]">
                      <ChatPanel />
                    </div>

                    {/* Mandate Preview - HIDDEN (mandates now work in background) */}
                    {/* {activeMandate && (
                      <SignMandatePanel mandate={activeMandate} />
                    )} */}

                    {/* Strategies Section - HIDDEN (now shown as quick reply buttons in chat) */}
                    {false && (
                    <div className="space-y-4">
                    <div id="strategies-section" className="rounded-2xl p-4 bg-white shadow-sm">
                      <div className="flex items-center justify-between mb-4">
                        <div>
                          <h3 className="text-lg font-semibold">Strategies for You</h3>
                          <p className="text-xs text-gray-500">
                            {proposals.length > 0
                              ? `${proposals.length} high-yield opportunities ready to review`
                              : activeMandate
                                ? 'Finding the best matches for your mandate...'
                                : 'Create a mandate to start finding opportunities'}
                          </p>
                        </div>
                        {proposals.length > 0 && (
                          <div className="flex items-center gap-2">
                            <div className="w-2 h-2 rounded-full bg-green-500"></div>
                            <div className="text-xs text-gray-500">Last scan: just now</div>
                          </div>
                        )}
                      </div>

                      {proposals.length > 0 ? (
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                          {proposals.map(p => <ProposalCard key={p.id} p={p} onView={openProposal} />)}
                        </div>
                      ) : (
                        <OpportunityEmptyState
                          hasMandate={!!activeMandate}
                          isScanning={isScanning}
                          onCreateMandate={() => {
                            // Focus on the input field in chat
                            pushNotification({ title: 'Getting started', body: 'Use the assistant to describe your investment goals.' });
                          }}
                        />
                      )}
                    </div>
                    </div>
                    )}
                    {/* End of hidden strategies section */}

                    {activeProposal && <ProposalDetailPanel proposal={activeProposal} />}

                    {/* Transaction Progress and Positions - only show when active */}
                    <div className="space-y-4">
                      {activeTx && <TxProgressPanel txId={activeTx} />}

                      {positions.length > 0 && (
                        <div className="rounded-2xl bg-white p-4 shadow-sm">
                          <div className="flex items-center justify-between mb-3">
                            <div className="text-sm font-semibold">Active Positions</div>
                            <div className="text-xs text-gray-500">{positions.length} position{positions.length !== 1 ? 's' : ''}</div>
                          </div>
                          <div className="space-y-3">
                            {positions.map(p => (
                              <div key={p.id} className="flex items-center justify-between border rounded-lg p-3 hover:border-gray-300 transition-colors">
                                <div>
                                  <div className="text-sm font-semibold">{p.title}</div>
                                  <div className="text-xs text-gray-500">Value: ${p.value.toLocaleString()} ‚Ä¢ Health: {p.healthFactor}x</div>
                                </div>
                                <div className="flex gap-2">
                                  <button onClick={()=>closePosition(p.id)} className="px-3 py-1.5 rounded-lg border border-gray-200 hover:border-red-300 hover:bg-red-50 text-sm transition-colors">Close</button>
                                </div>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Notifications */}
                  <div className="fixed right-6 bottom-6 w-96 space-y-3 z-50">
                    {/** Simple notifications list */}
                    {value.notifications && value.notifications.map(n => (
                      <div key={n.id} className="rounded-lg border bg-white p-3 shadow">
                        <div className="flex items-start justify-between">
                          <div>
                            <div className="text-sm font-semibold">{n.title}</div>
                            <div className="text-xs text-gray-600 mt-1">{n.body}</div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </AppContext.Provider>
          );
        }

        // Render the app
        const root = createRoot(document.getElementById('root'));
        root.render(
            <StrictMode>
                <FullFlowApp />
            </StrictMode>
        );
    </script>
</body>
</html>
